AWSTemplateFormatVersion: "2010-09-09"
Description:
  "AWS CloudFormation Sample Template WordPress_Single_Instance: WordPress
  is web software you can use to create a beautiful website or blog. This template
  installs WordPress with a local MySQL database for storage. It demonstrates using
  the AWS CloudFormation bootstrap scripts to deploy WordPress. **WARNING** This template
  creates an Amazon EC2 instance. You will be billed for the AWS resources used if
  you create a stack from this template."
Parameters:
  DBName:
    Description: The WordPress database name
    Default: "{{resolve:ssm:dbName:1}}"
    Type: String
  DBPassword:
    Description: The WordPress database admin account password
    Default: "{{resolve:secretsmanager:dbPassword}}"
    Type: String
  DBRootPassword:
    Description: MySQL root password
    Default: "{{resolve:secretsmanager:dbRootPassword}}"
    Type: String
  DBUser:
    Description: The WordPress database admin account username
    Default: "{{resolve:ssm:dbUser:1}}"
    Type: String
  InstanceType:
    Default: t3.small
    Description: WebServer EC2 instance type
    Type: String
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2"
Resources:
  WebServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
            - configure_wordpress
        configure_wordpress:
          commands:
            01_set_mysql_root_password:
              command: !Sub |
                mysqladmin -u root password '${DBRootPassword}'
              test: !Sub |
                $(mysql ${DBName} -u root --password='${DBRootPassword}' >/dev/null 2>&1 </dev/null); (( $? != 0 ))
            02_create_database:
              command: !Sub |
                mysql -u root --password='${DBRootPassword}' < /tmp/setup.mysql
              test: !Sub |
                $(mysql ${DBName} -u root --password='${DBRootPassword}' >/dev/null 2>&1 </dev/null); (( $? !=0))
            03_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: "000400"
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --configsets wordpress_install --url https://stackbuilder.amazonaws.com
              group: root
              mode: "000400"
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          files:
            /tmp/create-wp-config:
              content: !Sub |
                #!/bin/bash -xe
                cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
                sed -i "s/'database_name_here'/'${DBName}'/g" wp-config.php
                sed -i "s/'username_here'/'${DBUser}'/g" wp-config.php
                sed -i "s/'password_here'/'${DBPassword}'/g" wp-config.php
              group: root
              mode: "000500"
              owner: root
            /tmp/setup.mysql:
              content: !Sub |
                CREATE DATABASE ${DBName};
                CREATE USER '${DBUser}'@'localhost' IDENTIFIED BY '${DBPassword}';
                GRANT ALL ON ${DBName}.* TO '${DBUser}'@'localhost'; 
                FLUSH PRIVILEGES;
              group: root
              mode: "000400"
              owner: root
          packages:
            yum:
              httpd: []
              mysql: []
              mysql-devel: []
              mysql-libs: []
              mysql-server: []
              php: []
              php-mysql: []
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
              mysqld:
                enabled: true
                ensureRunning: true
          sources:
            /var/www/html: http://wordpress.org/wordpress-5.1.4.tar.gz
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      Monitoring: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource WebServer --configsets wordpress_install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServer --region ${AWS::Region}
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable HTTP access via port 80 locked down to the load balancer + SSH access"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
Outputs:
  PublicIP:
    Description: EC2 public IP
    Value: !GetAtt WebServer.PublicIp
  WebsiteURL:
    Description: WordPress Website
    Value: !Sub "http://${WebServer.PublicDnsName}/wordpress"
